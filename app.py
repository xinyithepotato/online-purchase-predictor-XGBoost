# -*- coding: utf-8 -*-
"""Catboost_Model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GZ7fJALhcokGevTKhH5NQF5kwtjJ8E30
"""

import streamlit as st
import pandas as pd
import joblib

# Load the trained model
model = joblib.load('catboost_model.pkl')

# Load expected feature names
expected_features = joblib.load('model_features.pkl')

st.set_page_config(page_title="Online Purchase Prediction", page_icon="🛒")
st.title("🛍️ Predict Online Purchase Intention")

st.markdown("Upload your CSV file containing user behavior data:")

uploaded_file = st.file_uploader("Choose a CSV file", type="csv")

if uploaded_file:
    df = pd.read_csv(uploaded_file)

    # 🧼 Optional: Preview uploaded data
    st.subheader("📄 Uploaded Data Preview")
    st.write(df.head())

    df_fe = df.copy()
    df_fe['SessionDuration'] = (
        df_fe['Administrative_Duration'] +
        df_fe['Informational_Duration'] +
        df_fe['ProductRelated_Duration']
    )
    df_fe['TotalPagesVisited'] = (
        df_fe['Administrative'] +
        df_fe['Informational'] +
        df_fe['ProductRelated']
    )
    df_fe['EngagementRate'] = df_fe['PageValues'] / df_fe['TotalPagesVisited']
    df_fe['EngagementRate'].replace([float('inf'), -float('inf')], 0, inplace=True)
    df_fe['EngagementRate'].fillna(0, inplace=True)
    df_fe['ExitBounceDiff'] = df_fe['ExitRates'] - df_fe['BounceRates']
    df_fe['TimePerPage'] = df_fe['SessionDuration'] / df_fe['TotalPagesVisited']
    df_fe['TimePerPage'].replace([float('inf'), -float('inf')], 0, inplace=True)
    df_fe['TimePerPage'].fillna(0, inplace=True)

    if "Revenue" in df_fe.columns:
        df_fe.drop(columns=["Revenue"], inplace=True)

    df_encoded = pd.get_dummies(df_fe, columns=["Month", "VisitorType"], drop_first=True)

    df_encoded = df_encoded.reindex(columns=expected_features, fill_value=0)

    # Make predictions
    predictions = model.predict(df_encoded)

    # 🧾 Output predictions
    st.subheader("🔍 Predictions:")
    purchase = 0
    for i,pred in enumerate(predictions):
        if pred == 1:
            purchase += 1
    st.write(f"Total number of purchases: {purchase}")
    
    for i, pred in enumerate(predictions):
        st.write(f"Row {i + 1}: {'🟢 Will Purchase' if pred == 1 else '🔴 Will Not Purchase'}")

else:
    st.info("Please upload a CSV file to get predictions.")